services:
  web:
    build:
      context: .
      dockerfile: Dockerfile
    entrypoint: /app/entrypoint.sh
    command: >
      gunicorn core.asgi:application
      -k uvicorn.workers.UvicornWorker
      --bind 0.0.0.0:8080
      --workers 8
      --threads 2
      --worker-connections 1000
      --timeout 60
      --graceful-timeout 30
      --max-requests 5000
      --max-requests-jitter 500
      --log-level warning
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    expose:
      - "8080"
    ports:
      - "8080:8080"
    volumes:
      - django_static:/app/static
      - django_media:/app/media
    restart: always
    healthcheck:
      test: [ "CMD-SHELL", "timeout 5 bash -c '</dev/tcp/127.0.0.1/8080' || exit 1" ]
      interval: 30s
      timeout: 5s
      retries: 5

  nginx:
    image: nginx:alpine
    depends_on:
      - web
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      - django_static:/app/static:ro
      - django_media:/app/media:ro
    restart: always

  db:
    image: postgres:15
    command: postgres -c max_connections=300
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    expose:
      - "5432"
    env_file:
      - .env
    restart: always
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}" ]
      interval: 10s
      timeout: 5s
      retries: 5

  pgbouncer:
    image: edoburu/pgbouncer
    container_name: pgbouncer
    environment:
      - DATABASES_HOST=db
      - DATABASES_USER=postgres
      - DATABASES_PASSWORD=admin
      - DATABASES_DB=tg_member
      - POOL_MODE=transaction      # session / transaction / statement
      - MAX_CLIENT_CONN=500        # Django ulanishlari soni
      - DEFAULT_POOL_SIZE=50       # Har bir DB uchun pool oâ€˜lchami
      - MIN_POOL_SIZE=10
    volumes:
      - ./pgbouncer/pgbouncer.ini:/etc/pgbouncer/pgbouncer.ini
      - ./pgbouncer/userlist.txt:/etc/pgbouncer/userlist.txt
    depends_on:
      db:
        condition: service_healthy

    ports:
      - "6432:6432"
    restart: always
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -h 127.0.0.1 -p 6432 -U ${DB_USER} -d ${DB_NAME}" ]
      interval: 10s
      timeout: 5s
      retries: 5

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    depends_on:
      - web
    restart: always

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    depends_on:
      - prometheus
    restart: always

  redis:
    image: redis:7
    command: [ "redis-server", "--requirepass", "${REDIS_PASSWORD}" ]
    volumes:
      - redis_data:/data
    restart: always
    healthcheck:
      test: [ "CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5

  celery:
    build:
      context: .
      dockerfile: Dockerfile
    entrypoint: /app/entrypoint.sh
    command: celery -A core worker -l info
    env_file:
      - .env
    volumes:
      - .:/app
    depends_on:
      - redis
      - db
      - web
    restart: always

  celery-beat:
      build:
        context: .
        dockerfile: Dockerfile
      entrypoint: /app/entrypoint.sh
      command: celery -A core beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler
      env_file:
        - .env
      volumes:
        - .:/app
      depends_on:
        - redis
        - db
        - web
      restart: always

  flower:
      build:
        context: .
        dockerfile: Dockerfile
      entrypoint: /app/entrypoint.sh
      command: celery -A core flower --port=5555 --broker=redis://:$(REDIS_PASSWORD)@redis:6379/0
      env_file:
        - .env
      volumes:
        - .:/app
      depends_on:
        - redis
        - db
        - web
      ports:
        - "5555:5555"
      restart: always

volumes:
  postgres_data:
  redis_data:
  django_static:
  django_media:
